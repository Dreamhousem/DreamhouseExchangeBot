from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes
from utils.logger import logger
from services.cache import get_from_cache, add_to_cache
from services.nbrb_api import get_rate_on_date
from db import execute_query

# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç
# POPULAR_CURRENCIES = ["GBP", "KZT", "PLN", "UAH", "EGP", "GEL", "AED", "VND", "CNY", "RUB", "EUR", "USD"]
# –§–ª–∞–≥–∏ –¥–ª—è –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–∞–ª—é—Ç
CURRENCY_FLAGS = {
    "KZT": "üá∞üáø",    
    "EGP": "üá™üá¨",
    "GEL": "üá¨üá™",
    "AED": "üá¶üá™",
    "VND": "üáªüá≥",
    "GBP": "üá¨üáß",
    "PLN": "üáµüá±",
    "UAH": "üá∫üá¶",
    "CNY": "üá®üá≥",
    "RUB": "üá∑üá∫",
    "EUR": "üá™üá∫",
    "USD": "üá∫üá∏"
}

async def currencies_all(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /currencies_all. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–ª—é—Ç,
    –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–Ω–∏–∑—É —Å–ø–∏—Å–∫–∞).

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
    """
    user = update.effective_user
    logger.info(f"[CURRENCIES_ALL] User {user.full_name} (ID: {user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É: /currencies_all")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–ª—é—Ç –∏–∑ –ë–î
        query = """
        SELECT currency_code, currency_name, scale, request_count
        FROM currency_requests
        ORDER BY request_count ASC
        """
        results = execute_query(query)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
        if not results:
            await update.message.reply_text("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª—é—Ç–∞—Ö.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–ª—é—Ç
        sorted_currencies = [
            f"/{code} {name} (–∑–∞ {scale})"
            for code, name, scale, _ in results
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–ª—é—Ç—ã –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
        popular_currencies = [
            f"- /{code} {name} (–∑–∞ {scale})"
            for code, name, scale, _ in results if code in CURRENCY_FLAGS
        ]

        response = "\n".join(sorted_currencies + popular_currencies)

        logger.info(f"[CURRENCIES_ALL] –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.full_name} (ID: {user.id}).")
        await update.message.reply_text(f"üìú **–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç:**\n{response}")

    except Exception as e:
        logger.error(f"[CURRENCIES] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç –∏–∑ –ë–î: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")    


def get_currency_codes():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç –∏–∑ –ë–î (—Ç–∞–±–ª–∏—Ü–∞ currency_requests).
    """
    try:
        query = "SELECT DISTINCT currency_code FROM currency_requests"
        results = execute_query(query)
        return {row[0] for row in results}
    except Exception as e:
        logger.error(f"[CURRENCY_HANDLER] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–ª—é—Ç –∏–∑ –ë–î: {e}")
        return set()

async def currency_today(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –≤–∞–ª—é—Ç (/USD, /EUR –∏ —Ç. –¥.), –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
    """
    user = update.effective_user
    message_text = update.message.text.strip().upper()
    logger.info(f"[CURRENCY_TODAY] User {user.full_name} (ID: {user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –∫—É—Ä—Å: {message_text}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '/'
    if not message_text.startswith('/'):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '/'. –ü—Ä–∏–º–µ—Ä: /USD")
        return

    # –£–±–∏—Ä–∞–µ–º '/' –∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–∞–ª—é—Ç—ã
    currency_code = message_text[1:].strip().upper()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã –∏–∑ –ë–î
    valid_currencies = get_currency_codes()
    if currency_code not in valid_currencies:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {currency_code} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        return

    today = datetime.now().strftime("%Y-%m-%d")

    logger.info(f"[CURRENCY_TODAY] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—Å {currency_code} –Ω–∞ {today}...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    rate = get_from_cache(currency_code, today)
    if rate is None:
        logger.info(f"[CURRENCY_TODAY] –ö—É—Ä—Å {currency_code} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫—ç—à–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º API...")
        rate = get_rate_on_date(currency_code, today)
        if rate:
            add_to_cache(currency_code, today, rate)
            logger.info(f"[CURRENCY_TODAY] –ö—É—Ä—Å {currency_code} –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ API –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—ç—à: {rate}")
        else:
            logger.warning(f"[CURRENCY_TODAY] –ö—É—Ä—Å {currency_code} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–∞–∂–µ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ API.")
            await update.message.reply_text(f"‚ùå –ö—É—Ä—Å {currency_code} –Ω–∞ {today} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã, –º–∞—Å—à—Ç–∞–± –∏ —Ñ–ª–∞–≥
    details = execute_query(
        "SELECT currency_name, scale FROM currency_requests WHERE currency_code = ? LIMIT 1",
        (currency_code,)
    )

    currency_name = currency_code  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    scale = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    flag = CURRENCY_FLAGS.get(currency_code, "üè≥")  # –ï—Å–ª–∏ —Ñ–ª–∞–≥–∞ –Ω–µ—Ç, —Å—Ç–∞–≤–∏–º –±–µ–ª—ã–π —Ñ–ª–∞–≥ üè≥

    if details:
        currency_name, scale = details[0]

    response_message = f"üí∞ /{currency_code} {currency_name}: {rate} BYN (–∑–∞ {scale} {flag}) –Ω–∞ {today}"

    await update.message.reply_text(response_message)
    logger.info(f"[CURRENCY_TODAY] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.full_name} (ID: {user.id}): {response_message}")