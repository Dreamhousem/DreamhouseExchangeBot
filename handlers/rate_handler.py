from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes
from utils.logger import logger
from services.cache import get_from_cache, add_to_cache
from db import execute_query, update_exchange_rates
from services.nbrb_api import get_rate_on_date
import time

# –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç
POPULAR_CURRENCIES = ["USD", "EUR", "RUB", "CNY"]

async def rate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rate. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç.
    """
    user = update.effective_user
    message_text = update.message.text
    logger.info(f"[RATE] User {user.full_name} (ID: {user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç: {message_text}")

    today = datetime.now().strftime("%Y-%m-%d")
    responses = []

    for currency in POPULAR_CURRENCIES:
        logger.info(f"[RATE] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—Å {currency} –Ω–∞ {today}...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            rate = get_from_cache(currency, today)
            if rate is not None:
                logger.info(f"[RATE] –ö—É—Ä—Å {currency} –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ: {rate}")
            else:
                logger.info(f"[RATE] –ö—É—Ä—Å {currency} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫—ç—à–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ë–î...")
                query = "SELECT rate FROM exchange_rates WHERE currency_code = ? AND date = ? LIMIT 1"
                result = execute_query(query, (currency, today))

                if result:
                    rate = result[0][0]
                    add_to_cache(currency, today, rate)
                    logger.info(f"[RATE] –ö—É—Ä—Å {currency} –Ω–∞–π–¥–µ–Ω –≤ –ë–î: {rate}")
                else:
                    logger.info(f"[RATE] –ö—É—Ä—Å {currency} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API...")
                    update_exchange_rates(POPULAR_CURRENCIES)
                    rate = get_from_cache(currency, today)

            if rate:
                details = execute_query(
                    "SELECT currency_name, scale FROM currency_requests WHERE currency_code = ? LIMIT 1",
                    (currency,)
                )
                if details:
                    currency_name, scale = details[0]
                    responses.append(f"/{currency} {currency_name}: **{rate} BYN** (–∑–∞ {scale})")
                    logger.info(f"[RATE] –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç: {currency_name} ({rate} BYN –∑–∞ {scale})")
                else:
                    responses.append(f"/{currency}: –ö—É—Ä—Å –Ω–∞–π–¥–µ–Ω, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                    logger.warning(f"[RATE] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ {currency} –≤ —Ç–∞–±–ª–∏—Ü–µ currency_requests.")
            else:
                responses.append(f"/{currency}: –ö—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                logger.warning(f"[RATE] –ö—É—Ä—Å {currency} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

        except Exception as e:
            logger.error(f"[RATE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {currency}: {e}")

    if responses:
        message_text = f"üí∞ **–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ {today}:**\n" + "\n".join(responses)
    else:
        message_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        logger.error("[RATE] –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø—É—Å—Ç, –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    await update.message.reply_text(message_text)
    logger.info(f"[RATE] –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.full_name} (ID: {user.id}): {message_text}")


async def rate_on_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rate_on_date. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—É—Ä—Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.
    """
    user = update.effective_user
    message_text = update.message.text
    logger.info(f"[RATE_ON_DATE] User {user.full_name} (ID: {user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª: {message_text}")

    if len(context.args) != 2:
        error_message = "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –≤–∞–ª—é—Ç—ã –∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /rate_on_date USD 2024-12-12"
        await update.message.reply_text(error_message)
        logger.warning(f"[RATE_ON_DATE] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {user.full_name} (ID: {user.id}): {message_text}")
        return

    currency_code = context.args[0].upper()
    date = context.args[1]

    logger.info(f"[RATE_ON_DATE] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—Å {currency_code} –Ω–∞ {date}...")

    rate = get_from_cache(currency_code, date)
    if rate is not None:
        logger.info(f"[RATE_ON_DATE] –ö—É—Ä—Å {currency_code} –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ: {rate}")
    else:
        logger.info(f"[RATE_ON_DATE] –ö—É—Ä—Å {currency_code} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫—ç—à–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ë–î...")

        query = "SELECT rate FROM exchange_rates WHERE currency_code = ? AND date = ? LIMIT 1"
        result = execute_query(query, (currency_code, date))

        if result:
            rate = result[0][0]
            add_to_cache(currency_code, date, rate)
            logger.info(f"[RATE_ON_DATE] –ö—É—Ä—Å {currency_code} –Ω–∞–π–¥–µ–Ω –≤ –ë–î: {rate}")
        else:
            logger.info(f"[RATE_ON_DATE] –ö—É—Ä—Å {currency_code} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ API...")
            rate = get_rate_on_date(currency_code, date)
            
            if rate:
                add_to_cache(currency_code, date, rate)
                logger.info(f"[RATE_ON_DATE] –ö—É—Ä—Å {currency_code} –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ API –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—ç—à: {rate}")
            else:
                logger.warning(f"[RATE_ON_DATE] –ö—É—Ä—Å {currency_code} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–∞–∂–µ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ API.")

    if rate:
        query = "SELECT currency_name, scale FROM currency_requests WHERE currency_code = ? LIMIT 1"
        details = execute_query(query, (currency_code,))

        if details:
            currency_name, scale = details[0]
            response_message = f"üí∞ /{currency_code} {currency_name}: **{rate} BYN** (–∑–∞ {scale}) –Ω–∞ {date}"
            await update.message.reply_text(response_message)
            logger.info(f"[RATE_ON_DATE] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.full_name} (ID: {user.id}): {response_message}")
        else:
            error_message = f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {currency_code} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            await update.message.reply_text(error_message)
            logger.warning(f"[RATE_ON_DATE] {error_message}")
    else:
        error_message = f"‚ùå –ö—É—Ä—Å {currency_code} –Ω–∞ {date} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        await update.message.reply_text(error_message)
        logger.warning(f"[RATE_ON_DATE] {error_message}")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user = update.effective_user
    message_text = update.message.text
    logger.info(f"[ECHO] User {user.full_name} (ID: {user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")
    await update.message.reply_text(message_text)


async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. –°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞.
    """
    user = update.effective_user
    message_text = update.message.text
    logger.info(f"[UNKNOWN] User {user.full_name} (ID: {user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {message_text}")
    await update.message.reply_text(
        "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )
